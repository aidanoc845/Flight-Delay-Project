# -*- coding: utf-8 -*-
"""ot_summaries.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BQMId9MUhXy6Jjlu32_KaVT12C5M0tLL
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import date
import plotly.express as px

# Read raw data
delayData = pd.read_csv("Airline_Delay_Cause_Apr24-Apr25.csv")
delayData.info()
delayData.head()

#create date column
delayData['date'] = pd.to_datetime(delayData[['year', 'month']].assign(day=1))
#remove year and month column
delayData = delayData.drop(['year', 'month'], axis=1)
#remove excess columns and date
delayData = delayData.drop([ 'carrier', 'airport_name'], axis=1)
delayData = delayData[delayData['date'] != '2025-04-01']

delayData.head()

# Drop the airport column
carrier_summary = delayData.drop(['airport', 'date'], axis=1)
# Group by carrier and sum all numeric columns
carrier_summary = carrier_summary.groupby('carrier_name').sum().reset_index()
# Calculate the percentage of flights delayed (more than 15 minutes)
carrier_summary['percent_delayed'] = (carrier_summary['arr_del15'] / carrier_summary['arr_flights'] * 100).round(2)
# Calculate the total minutes delayed
carrier_summary['minutes_delayed'] = carrier_summary['arr_delay'] +	carrier_summary['carrier_delay'] +	carrier_summary['weather_delay'] +	carrier_summary['nas_delay'] +	carrier_summary['security_delay'] +	carrier_summary['late_aircraft_delay']
# Remove excess columns
carrier_summary = carrier_summary.drop([
    'arr_del15',
    'arr_flights',
    'arr_delay',
    'carrier_delay',
    'weather_delay',
    'nas_delay',
    'security_delay',
    'late_aircraft_delay',
    'carrier_ct',
    'weather_ct',
    'nas_ct',
    'security_ct',
    'late_aircraft_ct',
    'arr_cancelled',
    'arr_diverted'
], axis=1)

# Sort by least delayed options
carrier_summary.sort_values('percent_delayed', ascending=False)

# Create a subsection of data for airport-specific data
airport_summary = delayData.drop(['carrier_name', 'date'], axis=1)
# Group by airport
airport_summary = airport_summary.groupby('airport').sum().reset_index()
# Create delayed related information
airport_summary['percent_delayed'] = (airport_summary['arr_del15'] / airport_summary['arr_flights'] * 100).round(2)
airport_summary['minutes_delayed'] = airport_summary['arr_delay'] + airport_summary['carrier_delay'] + airport_summary['weather_delay'] + airport_summary['nas_delay'] + airport_summary['security_delay'] + airport_summary['late_aircraft_delay']
# Remove excess columns
airport_summary = airport_summary.drop([
    'arr_del15',
    'arr_flights',
    'arr_delay',
    'carrier_delay',
    'weather_delay',
    'nas_delay',
    'security_delay',
    'late_aircraft_delay',
    'carrier_ct',
    'weather_ct',
    'nas_ct',
    'security_ct',
    'late_aircraft_ct',
    'arr_cancelled',
    'arr_diverted'
], axis=1)

# Sort by least delayed options
airport_summary.sort_values('percent_delayed', ascending=False)

# Create a subsection of data for date-specific data
date_summary = delayData.drop(['carrier_name', 'airport'], axis=1)
# Group by date
date_summary = date_summary.groupby('date').sum().reset_index()
# Create delayed related information
date_summary['percent_delayed'] = (date_summary['arr_del15'] / date_summary['arr_flights'] * 100).round(2)
date_summary['minutes_delayed'] = date_summary['arr_delay'] + date_summary['carrier_delay'] + date_summary['weather_delay'] + date_summary['nas_delay'] + date_summary['security_delay'] + date_summary['late_aircraft_delay']
# Remove excess columns
date_summary = date_summary.drop([
    'arr_del15',
    'arr_flights',
    'arr_delay',
    'carrier_delay',
    'weather_delay',
    'nas_delay',
    'security_delay',
    'late_aircraft_delay',
    'carrier_ct',
    'weather_ct',
    'nas_ct',
    'security_ct',
    'late_aircraft_ct',
    'arr_cancelled',
    'arr_diverted'
], axis=1)

# Sort by least delayed options
date_summary.sort_values('percent_delayed', ascending=False)

#Export cleaned data to a CSV/Excel file
carrier_summary.to_csv("carrier_summary.csv", index=False)
carrier_summary.to_excel("carrier_summary.xlsx", index=False)
airport_summary.to_csv("airport_summary.csv", index=False)
airport_summary.to_excel("airport_summary.xlsx", index=False)
date_summary.to_csv("date_summary.csv", index=False)
date_summary.to_excel("date_summary.xlsx", index=False)